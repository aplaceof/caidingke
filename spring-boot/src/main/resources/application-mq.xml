<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">


    <!-- 连接本地rabbitmq -->
    <rabbit:connection-factory id="connectionFactory"
                               host="${mq-host}" port="${mq-port}" username="${mq-username}" password="${mq-password}"/>

    <rabbit:admin connection-factory="connectionFactory" id="amqpAdmin"/>

    <!-- queue 队列声明 -->
    <!--说明：-->
    <!--durable:是否持久化-->
    <!--exclusive: 仅创建者可以使用的私有队列，断开后自动删除-->
    <!--auto_delete: 当所有消费客户端连接断开后，是否自动删除队列-->

    <rabbit:queue id="rabbit-queue-one" durable="true"
                  auto-delete="false" exclusive="false" name="rabbit_queue_one"/>

    <rabbit:queue id="rabbit_queue_two" durable="true"
                  auto-delete="false" exclusive="false" name="rabbit_queue_two"/>

    <!-- 声明的订阅模型的queue(fanout) -->
    <rabbit:queue id="fanout-subscribe" durable="true" auto-delete="false" exclusive="false" name="fanout-subscribe"/>
    <rabbit:queue id="fanout-subscribe2" durable="true" auto-delete="false" exclusive="false" name="fanout-subscribe2"/>

    <!-- 将订阅的queue绑定到fanout-exchange上 -->
    <rabbit:fanout-exchange name="fanout-exchange" durable="true" auto-delete="false" id="fanout-exchange">
        <rabbit:bindings>
            <rabbit:binding queue="fanout-subscribe"></rabbit:binding>
            <!--<rabbit:binding queue="fanout-subscribe2"></rabbit:binding>-->
        </rabbit:bindings>
    </rabbit:fanout-exchange>


    <!-- 声明的订阅模型的queue(topic) -->
    <rabbit:queue id="queue_topic" durable="true" auto-delete="false" exclusive="false" name="queue_topic"/>
    <rabbit:queue id="queue_topic2" durable="true" auto-delete="false" exclusive="false" name="queue_topic2"/>



    <!-- exchange queue binging key 绑定 -->
    <!--rabbit:direct-exchange：定义exchange模式为direct，意思就是消息与一个特定的路由键完全匹配，才会转发。-->
    <!--rabbit:binding：设置消息queue匹配的key-->
    <!--<rabbit:direct-exchange name="mq-exchange"-->
    <!--durable="true" auto-delete="false" id="mq-exchange">-->
    <!--<rabbit:bindings>-->
    <!--<rabbit:binding queue="rabbit_queue_two" key="rabbit_queue_two" />-->
    <!--<rabbit:binding queue="rabbit-queue-one" key="rabbit_queue_two"/>-->
    <!--</rabbit:bindings>-->
    <!--</rabbit:direct-exchange>-->


    <bean id="jsonMessageConverter"
          class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter"></bean>

    <!-- spring template声明 -->
    <!--<rabbit:template exchange="mq-exchange" id="amqpTemplate"-->
    <!--connection-factory="connectionFactory" />-->

    <!-- queue litener  观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象
    taskExecutor这个需要自己实现一个连接池 按照官方说法 除非特别大的数据量 一般不需要连接池 -->
    <!--queues：监听的队列，多个的话用逗号（,）分隔 ref：监听器-->
    <rabbit:listener-container message-converter="jsonMessageConverter" connection-factory="connectionFactory"
                               acknowledge="auto">
        <rabbit:listener queues="rabbit-queue-one,rabbit_queue_two" ref="messageConsumerService"/>
    </rabbit:listener-container>

    <!-- fanout监听器绑定 -->
    <rabbit:listener-container message-converter="jsonMessageConverter" connection-factory="connectionFactory" acknowledge="auto">
        <rabbit:listener queues="fanout-subscribe" ref="fanoutListener"/>
    </rabbit:listener-container>

    <!--<rabbit:listener-container message-converter="jsonMessageConverter" connection-factory="connectionFactory" acknowledge="auto">-->
        <!--<rabbit:listener queues="fanout-subscribe2" ref="fanoutListener"/>-->
    <!--</rabbit:listener-container>-->


    <!-- topic监听器绑定-->
    <rabbit:listener-container connection-factory="connectionFactory" acknowledge="auto">
        <rabbit:listener queues="queue_topic" ref="topicListener"/>
    </rabbit:listener-container>

    <rabbit:listener-container connection-factory="connectionFactory" acknowledge="auto">
        <rabbit:listener queues="queue_topic2" ref="topicListener"/>
    </rabbit:listener-container>


</beans>