<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <!-- 扫描包 -->
    <context:component-scan base-package="net.caidingke.rabbitmq.*"/>
    <context:annotation-config/>

    <!-- 连接本地rabbitmq -->
    <rabbit:connection-factory id="connectionFactory" host="127.0.0.1" port="5672" username="guest"
                               password="guest"/>

    <rabbit:admin connection-factory="connectionFactory" id="amqpAdmin"/>

    <rabbit:queue id="queue_topic" durable="true" auto-delete="false" exclusive="false" name="queue_topic"/>

    <rabbit:queue id="queue_topic2" durable="true" auto-delete="false" exclusive="false" name="queue_topic2"/>

    <rabbit:queue id="rabbit_queue_one" durable="true" auto-delete="false" exclusive="false" name="rabbit_queue_one"/>

    <rabbit:queue id="rabbit_queue_two" durable="true" auto-delete="false" exclusive="false" name="rabbit_queue_two"/>

    <!-- fanout-exchange，作为发布-订阅模式使用。
		由于RabbitMQ的发布订阅模型是根据多个queue，多个消费者订阅实现的。此处声明的exchange不必预先绑定queue，
		在消费者声明queue并绑定到该exchange即可。
	 -->
    <rabbit:fanout-exchange name="fanout-exchange" durable="true" auto-delete="false" id="fanout-exchange">
    </rabbit:fanout-exchange>

    <!-- exchange queue binging key 绑定，作为点对点模式使用 -->
    <rabbit:direct-exchange name="direct-exchange" durable="true" auto-delete="false" id="exchange-redirect">
        <rabbit:bindings>
            <rabbit:binding queue="rabbit_queue_one" key="queue_one_key"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!-- topic-exchange，作为主题模式使用。
       匹配routingkey的模式，这里匹配两个queue
       queue_topic准备匹配key为zhu.q1
       queue_topic2准备匹配key为zhu.q2
    -->
    <rabbit:topic-exchange name="topic-exchange">
        <rabbit:bindings>
            <rabbit:binding queue="queue_topic" pattern="xx"/>
            <rabbit:binding queue="queue_topic2" pattern="zhu.*"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!-- spring amqp默认的是jackson 的一个插件,目的将生产者生产的数据转换为json存入消息队列 -->
    <bean id="jsonMessageConverter"
          class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter"></bean>
    <!--自行实现为FastJson-->
    <!--<bean id="jsonMessageConverter" class="net.caidingke.rabbitmq.spring.FastJsonMessageConverter"/>-->

    <!-- spring template声明 -->
    <!--<rabbit:template id="amqpTemplate" connection-factory="connectionFactory" message-converter="jsonMessageConverter"/>-->

    <!-- spring template声明（发布，订阅 由于RabbitMQ的发布订阅模型是根据多个queue，多个消费者订阅实现的。此处声明的exchange不必预先绑定queue，
		在消费者声明queue并绑定到该exchange即可。） -->
    <rabbit:template exchange="fanout-exchange" id="fanoutTemplate" retry-template="retryConnTemplate"
                     connection-factory="connectionFactory" message-converter="jsonMessageConverter"/>

    <!-- 通用 template声明 -->
    <rabbit:template id="rabbitTemplate" retry-template="retryConnTemplate" connection-factory="connectionFactory"
                     message-converter="jsonMessageConverter"/>

    <!-- spring template声明 (点对点) -->
    <rabbit:template exchange="direct-exchange" id="directTemplate" retry-template="retryConnTemplate"
                     connection-factory="connectionFactory" message-converter="jsonMessageConverter"/>


    <!-- 增加失败重试机制，发送失败之后，会尝试重发三次，重发间隔(ms)为
	    第一次 initialInterval
	    此后：initialInterval*multiplier > maxInterval ? maxInterval : initialInterval*multiplier。
	    配合集群使用的时候，当mq集群中一个down掉之后，重试机制尝试其他可用的mq。
	 -->
    <bean id="retryConnTemplate" class="org.springframework.retry.support.RetryTemplate">
        <property name="backOffPolicy">
            <bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
                <property name="initialInterval" value="500"/>
                <property name="multiplier" value="10.0"/>
                <property name="maxInterval" value="5000"/>
            </bean>
        </property>
    </bean>


</beans>